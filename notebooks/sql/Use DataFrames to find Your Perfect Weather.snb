{"metadata":{"name":"Use DataFrames to find Your Perfect Weather","user_save_timestamp":"1970-01-01T01:00:00.000Z","auto_save_timestamp":"1970-01-01T01:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"id":"6B6FF7FFF3A74B188C0F864234D4E4DF"},"cell_type":"markdown","source":"#Use SparkSQL DataFrames to find *Your* Perfect Weather\n##Inspired by an award winning service http://MyPerfectWeather.eu\n##Created by Radek Ostrowski https://uk.linkedin.com/in/radekostrowski"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"5B89CEC855024C09B51B333FBB43D965"},"cell_type":"code","source":"import sys.process._\nimport java.net.URL\nimport java.io.File\nimport scala.language.postfixOps\nimport org.apache.spark.sql.{DataFrame, Row, SQLContext}\nimport org.apache.spark.sql.functions._\nval sqlContext = new SQLContext(sparkContext)","outputs":[]},{"metadata":{"id":"45EBDD6D6A014DB19E5298177FF5D98A"},"cell_type":"markdown","source":"###Download the raw weather prediction data for a set of European cities\n####It is an outdated and modified weather dataset originally forecasted by IBM The Weather Company"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"C5955601211C4C24A316AA15A6C49EC8"},"cell_type":"code","source":"val rawWeatherFile = \"/tmp/weather.json\"","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"2E9FD69F9C1840F887BCCE2AAB40423C"},"cell_type":"code","source":"new URL(\"http://www.fastdata.eu/data/weather.json\") #> new File(rawWeatherFile) !!","outputs":[]},{"metadata":{"id":"3C14AB6070454AC987CB8B0A99D38C2F"},"cell_type":"markdown","source":"##Read in the json dataset as a DataFrame"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"80066CB29B454617846E8C907C17D7F4"},"cell_type":"code","source":"val rawWeatherDf = sqlContext.read.format(\"json\").load(rawWeatherFile)","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1362035241-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"3864896883154DA4B80E22048CD645DE"},"cell_type":"code","source":"display(rawWeatherDf, maxPoints=1)","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"C0A44C94FFD240AF8721F1653FE97016"},"cell_type":"code","source":"rawWeatherDf.count","outputs":[]},{"metadata":{"id":"6F84DD3D88FC491E84A797282DD0795D"},"cell_type":"markdown","source":"##Let's make more sense out of it and extract some useful weather characteristics"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"93FC2EC667FA41A98356FF402CECF41C"},"cell_type":"code","source":"val usefulWeatherDf = rawWeatherDf.select(\"forecasts.dow\", \"forecasts.fcst_valid_local\",\n      \"forecasts.num\", \"forecasts.max_temp\", \"forecasts.min_temp\", \"forecasts.day.hi\",\n      \"forecasts.day.wspd\", \"forecasts.day.wdir_cardinal\", \"forecasts.day.icon_code\",\n      \"forecasts.day.precip_type\", \"forecasts.day.pop\", \"forecasts.day.clds\", \"forecasts.day.rh\",\n      \"_id\", \"airport\", \"country\")","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1782780279-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"4F142B0EBE5F47328AA6D044D2993269"},"cell_type":"code","source":"display(usefulWeatherDf, maxPoints=2)","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"3DD31F2DE70045DF985AC3A28443942A"},"cell_type":"code","source":"case class Weather(dayOfWeek: String, date: String, num: Long,\n                     max_temp: Long, min_temp: Long, mean_temp: Long,\n                     perceived_temperature: Long, wind_speed: Long, wind_direction_cardinal: String, icon_code: Long,\n                     precip_type: String, probability_of_precip: Long, clouds_cover: Long, relative_humidity: Long,\n                     city: String, country: String, airport: String) extends java.io.Serializable\n\nimport sqlContext.implicits._\n\nval parsedWeatherDf = usefulWeatherDf.flatMap(r => for {\n      x <- Range(1, 11)\n      y = Weather(r.getList[String](0).get(x), r.getList[String](1).get(x).split(\"T\")(0),\n        r.getList[Long](2).get(x), r.getList[Long](3).get(x),\n        r.getList[Long](4).get(x), (r.getList[Long](3).get(x) + r.getList[Long](4).get(x)) / 2,\n        r.getList[Long](5).get(x), r.getList[Long](6).get(x),\n        r.getList[String](7).get(x), r.getList[Long](8).get(x), r.getList[String](9).get(x),\n        r.getList[Long](10).get(x), r.getList[Long](11).get(x), r.getList[Long](12).get(x),\n        r.getString(13), r.getString(15), r.getString(14))\n    } yield y\n    ).toDF\n","outputs":[]},{"metadata":{"id":"1568F2D301264174A87C28B6D9583459"},"cell_type":"markdown","source":"##Finally, it looks like something that we could actually use"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab331334696-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [\n    \"min_temp\"\n  ],\n  \"vals\": [],\n  \"exclusions\": {\n    \"min_temp\": [\n      \"0\",\n      \"1\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"10\",\n      \"11\",\n      \"12\",\n      \"13\",\n      \"14\",\n      \"15\",\n      \"16\",\n      \"17\",\n      \"18\",\n      \"19\"\n    ]\n  },\n  \"inclusions\": {\n    \"min_temp\": [\n      \"20\",\n      \"21\"\n    ]\n  },\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {\n    \"min_temp\": [\n      \"20\",\n      \"21\"\n    ]\n  },\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"B54B76490B6D46478DC2A755AD48F152"},"cell_type":"code","source":"display(parsedWeatherDf)","outputs":[]},{"metadata":{"id":"D56071083E514DEB8495701F3AAF77FA"},"cell_type":"markdown","source":"##Now define what exactly is *your* perfect weather and see matching destinations"},{"metadata":{"id":"793DD1EFAE194E5E80D7B5EBD3C3B711"},"cell_type":"markdown","source":"###Somewhere warm, sunny and dry: \n####At least 20&deg;C, clouds cover less than 30% and definitely no rain!"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab337634519-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"682F951B078845A7A37D56951FB84D30"},"cell_type":"code","source":"display(parsedWeatherDf.where(\"min_temp >= 20 AND clouds_cover < 30 AND probability_of_precip  = 0\"))","outputs":[]},{"metadata":{"id":"B02CA7FE3B10415F8F08973E039F2CE4"},"cell_type":"markdown","source":"###Fly a kite: \n####Wind speed between 16 and 32 km/h, not too cloudy, not too sunny and zero chance of precipitation"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab829025553-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"0F6A68B8F062485F8251F7124FC7889A"},"cell_type":"code","source":"display(parsedWeatherDf.where(\"wind_speed >= 16 AND wind_speed <= 32 AND clouds_cover > 20 AND clouds_cover < 60 AND probability_of_precip  = 0\")\n        .select(\"city\", \"country\").groupBy(\"city\", \"country\").count().orderBy(desc(\"count\")).withColumnRenamed(\"count\",\"perfectDaysCount\"), maxPoints=10)","outputs":[]},{"metadata":{"id":"8D9C833C731543F28BFF5A832E22D396"},"cell_type":"markdown","source":"###Go fishing:\n####Wind speed less than 16 km/h, high clouds cover"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1212284064-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"FB0C2B9144C54444A93E020E729CEC77"},"cell_type":"code","source":"display(parsedWeatherDf.where(\"wind_speed < 16 AND clouds_cover > 40 AND probability_of_precip < 30\")\n       .select(\"city\", \"country\").groupBy(\"city\", \"country\").count().orderBy(desc(\"count\")).withColumnRenamed(\"count\",\"perfectDaysCount\"), maxPoints=10)","outputs":[]}],"nbformat":4}