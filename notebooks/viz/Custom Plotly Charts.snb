{
  "metadata" : {
    "name" : "Custom Plotly Charts",
    "user_save_timestamp" : "1111-10-01T03:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T03:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "DC16BF67890349F580549428C0848BB2"
    },
    "cell_type" : "markdown",
    "source" : "# Bar Charts"
  }, {
    "metadata" : {
      "id" : "5DC3CE3457CC4CBF89CF847FCF5A69B8"
    },
    "cell_type" : "markdown",
    "source" : "## Basic Line Chart"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "65FB920A524A466B88CC3B89722148C7"
    },
    "cell_type" : "code",
    "source" : "val traces = List.tabulate(4, 3)((i, j) => (i, scala.util.Random.nextInt(10), \"trace\"+j)).flatten",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F43C1D5465C34FF182768D720E96E0E9"
    },
    "cell_type" : "code",
    "source" : "val layout = \"\"\"\nlayout = {\n  title: 'Line Graph',\n  xaxis: {\n    title: 'x-axis title'\n  },\n  yaxis: {\n    title: 'y-axis title'\n  }\n}\n\"\"\"",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9495E1AA37C9482085B1198DA9108D5A"
    },
    "cell_type" : "code",
    "source" : "val line = CustomPlotlyChart(traces, \n                  dataOptions=\"{type: 'line', splitBy: '_3'}\",\n                  dataSources=\"{x: '_1', y: '_2'}\")\nline",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FBEF1413144146FB9CB12BE3C814C9B3"
    },
    "cell_type" : "code",
    "source" : "line.addAndApply(List((4, 10, \"trace0\"), (4, 10, \"trace1\"), (4, 10, \"trace2\")))",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "B569E588AE474C348E5DC84731FF8372"
    },
    "cell_type" : "markdown",
    "source" : "## Basic Bar Chart"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D3BAD6370D1B4EB98988845E1A09F323"
    },
    "cell_type" : "code",
    "source" : "case class Species(name: String, amount: Int)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "37B690E0CA6D41F380EA548312EFB490"
    },
    "cell_type" : "code",
    "source" : "val bar = CustomPlotlyChart(Seq(Species(\"giraffes\", 20), Species(\"orangutans\", 14), Species(\"monkeys\", 23)), \n                  dataOptions=\"{type: 'bar'}\",\n                  dataSources=\"{x: 'name', y: 'amount'}\")\nbar",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "2E6B3B07C3774284841A49C3B776A679"
    },
    "cell_type" : "markdown",
    "source" : "Adding some unicorns, not too much though. $5$ is probably even too much for this world..."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "29DB106198614C0584DC2FA05F09FB09"
    },
    "cell_type" : "code",
    "source" : "bar.addAndApply(Seq(Species(\"unicorns\", 5)))",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "D1B98FEC63BC46B8BD9E5F5542A8F58C"
    },
    "cell_type" : "markdown",
    "source" : "## Grouped Bar Chart"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "02492FA6AD294A009934D421EE7F3B8A"
    },
    "cell_type" : "code",
    "source" : "case class Species(name: String, amount: Int, zoo: String)\n\nval zoos = Seq(Species(\"giraffes\", 20, \"SF Zoo\"), Species(\"orangutans\", 14, \"SF Zoo\"), Species(\"monkeys\", 23, \"SF Zoo\"),\n               Species(\"giraffes\", 12, \"LA Zoo\"), Species(\"orangutans\", 18, \"LA Zoo\"), Species(\"monkeys\", 29, \"LA Zoo\"))",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8DEEA2C0D82144F0A65A90B24818D0BB"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(zoos,\n                  layout=\"{barmode: 'group'}\",\n                  dataOptions=\"{splitBy: 'zoo', type: 'bar'}\",\n                  dataSources=\"{x: 'name', y: 'amount'}\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D7BCB24EFF2D47A7B1C7B0B5ECE9083B"
    },
    "cell_type" : "markdown",
    "source" : "## Stacked Bar Chart"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9745838191BF4CD09D09F9C4DD113BAE"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(zoos,\n                  layout=\"{barmode: 'stack'}\",\n                  dataOptions=\"{splitBy: 'zoo', type: 'bar'}\",\n                  dataSources=\"{x: 'name', y: 'amount'}\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "BCAEC2971664418585E667902020CA3F"
    },
    "cell_type" : "markdown",
    "source" : "## Render a DataFrame in Plotly Chart"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0C1DE57076894F1F92346C34BCEB2C9C"
    },
    "cell_type" : "code",
    "source" : "val sqlContext = new org.apache.spark.sql.SQLContext(sparkContext)\nimport sqlContext.implicits._",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5C6F1355D9CC43ED825B3C7B523A742B"
    },
    "cell_type" : "code",
    "source" : "val exportDf = Seq(\n  (1995, 219, \"Rest of world\"), (1996, 146, \"Rest of world\"),\n  (1997, 112, \"Rest of world\"), (1998, 127, \"Rest of world\"),\n  (1999, 124, \"Rest of world\"), (2000, 180, \"Rest of world\"),\n  (2001, 236, \"Rest of world\"), (2002, 207, \"Rest of world\"),\n  (2003, 236, \"Rest of world\"), (2004, 263, \"Rest of world\"),\n  (2005, 350, \"Rest of world\"), (2006, 430, \"Rest of world\"),\n  (2007, 474, \"Rest of world\"), (2008, 526, \"Rest of world\"),\n  (2009, 488, \"Rest of world\"), (2010, 537, \"Rest of world\"),\n  (2011, 500, \"Rest of world\"), (2012, 439, \"Rest of world\"),\n  (1995, 16, \"China\"), (1996, 13, \"China\"),\n  (1997, 10, \"China\"), (1998, 11, \"China\"),\n  (1999, 28, \"China\"), (2000, 37, \"China\"),\n  (2001, 43, \"China\"), (2002, 55, \"China\"),\n  (2003, 56, \"China\"), (2004, 88, \"China\"),\n  (2005, 105, \"China\"), (2006, 156, \"China\"),\n  (2007, 270, \"China\"), (2008, 299, \"China\"),\n  (2009, 340, \"China\"), (2010, 403, \"China\"),\n  (2011, 549, \"China\"), (2012, 499, \"China\")\n).toDF(\"year\", \"usd\", \"destination\")\n",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FF6F5C1BB26748FE80028E4393F0121C"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(exportDf,\n                  layout=\"{barmode: 'group', title: 'US Export of Plastic Scrap', yaxis: {title: 'USD (millions)'}}\",\n                  dataOptions=\"{splitBy: 'destination', type: 'bar'}\",\n                  dataSources=\"{x: 'year', y: 'usd'}\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "DEBF85BE0C044F0089A22F0AB933E50F"
    },
    "cell_type" : "markdown",
    "source" : "## Colored and Styled Bar Chart"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "42A5D2036A82492A8944109EB4F71E5A"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(exportDf,\n                  layout=\"\"\"{\n  title: 'US Export of Plastic Scrap',\n  xaxis: {tickfont: {\n      size: 14,\n      color: 'rgb(107, 107, 107)'\n    }},\n  yaxis: {\n    title: 'USD (millions)',\n    titlefont: {\n      size: 16,\n      color: 'rgb(107, 107, 107)'\n    },\n    tickfont: {\n      size: 14,\n      color: 'rgb(107, 107, 107)'\n    }\n  },\n  legend: {\n    x: 0,\n    y: 1.0,\n    bgcolor: 'rgba(255, 255, 255, 0)',\n    bordercolor: 'rgba(255, 255, 255, 0)'\n  },\n  barmode: 'group',\n  bargap: 0.15,\n  bargroupgap: 0.1\n}\"\"\",\n                  dataOptions=\"\"\"{\n                    splitBy: 'destination',\n                    byTrace: {\n                      'China': {\n                        type: 'bar',\n                        marker: {color: 'rgb(26, 118, 255)'}\n                      },\n                      'Rest of world': {\n                        type: 'bar',\n                        marker: {color: 'rgb(55, 83, 109)'}\n                      }\n                    }\n                  }\"\"\",\n                  dataSources=\"{x: 'year', y: 'usd'}\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "54B4A25431F449E68FCFC890ECBC3A48"
    },
    "cell_type" : "markdown",
    "source" : "# Bubble Charts"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C8C567289BC5479185BAA847D4F384F1"
    },
    "cell_type" : "code",
    "source" : "val bubbles = Seq(\n  (1, 10, 40), (2, 11, 60), (3, 12, 80), (4, 13, 100)\n).toDF(\"xPos\", \"yPos\", \"bubbleSize\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DCFEBDE6B0FD487095DF8F91DBFDB6B9"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(bubbles, \n                  layout=\"{title: 'Marker Size', showlegend: false, height: 600, width: 600}\",\n                  dataOptions=\"{mode: 'markers'}\",\n                  dataSources=\"{x: 'xPos', y: 'yPos', marker: {size: 'bubbleSize'}}\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "2A37AC07E19A474C87D5D5C6E83D92EA"
    },
    "cell_type" : "markdown",
    "source" : "# Box Plots"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5B22F2003F4B49B89D4CD67012143444"
    },
    "cell_type" : "code",
    "source" : "import scala.util.Random",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1506371030-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "C9B2826834564DE7909B0326D6D26F1F"
    },
    "cell_type" : "code",
    "source" : "val samples = (0 until 50)\n      .flatMap(_ => Seq(Tuple2(Random.nextDouble(), \"A\"), Tuple2(Random.nextDouble() + 0.3, \"B\")))\n      .toDF(\"sample\", \"cls\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A996270615E64465B14E52AB4F284D04"
    },
    "cell_type" : "code",
    "source" : "CustomPlotlyChart(samples, \n                  dataOptions=\"{type: 'box', splitBy: 'cls'}\",\n                  dataSources=\"{y: 'sample'}\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "FF4CD0BF77BC4A268E8B019DB559228D"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}